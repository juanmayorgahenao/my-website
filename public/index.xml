<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Juan S. Mayorga on Juan S. Mayorga</title>
    <link>/</link>
    <description>Recent content in Juan S. Mayorga on Juan S. Mayorga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0700</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Global Fishing Watch Data from Google Big Query using R</title>
      <link>/post/getting-global-fishing-watch-from-google-bigquery-using-r/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-global-fishing-watch-from-google-bigquery-using-r/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-bigquery&#34;&gt;What is BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#global-fishing-watchs-data-in-bigquery&#34;&gt;Global Fishing Watch’s data in BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#establishing-a-connection&#34;&gt;Establishing a connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summarize-the-number-of-vessels-by-flag-state-and-gear-type&#34;&gt;1. Summarize the number of vessels by flag state and gear type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#make-a-time-series-of-fishing-effort-for-chinas-trawlers-fleet&#34;&gt;2. Make a time series of fishing effort for China’s trawlers fleet&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-dplyr-way&#34;&gt;The dplyr way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-would-i-ever-write-sql&#34;&gt;Why would I ever write SQL?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-sql-way&#34;&gt;The SQL way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#make-a-map-of-fishing-effort-for-a-particular-region-of-the-ocean&#34;&gt;3. Make a map of fishing effort for a particular region of the ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#closing-remarks&#34;&gt;Closing remarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;This blog post explains a couple of workflows to connect to Big Query using &lt;code&gt;R&lt;/code&gt;, and access Global Fishing Watch’s public data. Since you found this post, I’m going to assume that you are somewhat familiar with Global Fishing Watch and are looking to explore and analyze the data using &lt;code&gt;R&lt;/code&gt;. If you are not, check out our Science publication &lt;a href=&#34;http://science.sciencemag.org/content/359/6378/904&#34;&gt;Tracking the global footprint of fisheries&lt;/a&gt; as well as the &lt;a href=&#34;http://globalfishingwatch.io/&#34;&gt;Global Fishing Watch Open Data&lt;/a&gt; portal.&lt;/p&gt;
&lt;div id=&#34;what-is-bigquery&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What is BigQuery&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://bigquery.cloud.google.com/welcome&#34;&gt;BigQuery&lt;/a&gt; is Google’s platform to store and analyze large datasets. It is very fast and well integrated to other Google products such as cloud storage, and it’s free to use for up to 1TB of data analyzed each month, and up to 10GB of data stored. As any other database, it understands SQL and the online editor is a friendly place to learn and troubleshoot your queries. &lt;strong&gt;Big Query understands both Legacy and Standard SQL. Unfortunately, these languages are more different that you would expect, which makes things confusing. In this post I will use Standard SQL since Big Query is slowly migrating to only using this language in the future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To start using BigQuery, you need to have a gmail account and a Big Query-enabled project. If you don’t have this yet, please follow the steps in this quickstart guide &lt;a href=&#34;https://cloud.google.com/bigquery/quickstart-web-ui&#34;&gt;quickstart guide&lt;/a&gt; and come back when done.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;global-fishing-watchs-data-in-bigquery&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Global Fishing Watch’s data in BigQuery&lt;/h1&gt;
&lt;p&gt;Now that you have a BigQuery-enabled project, go the &lt;a href=&#34;https://bigquery.cloud.google.com&#34;&gt;BigQuery’s UI page&lt;/a&gt;. You should see your project in the side bar, above the Public Datasets project. Click on the small arrow next to your project name, then switch to project -&amp;gt; display project, and enter “global-fishing-watch” (without the quotes) on the Project ID. Click OK, and you should then have a &lt;code&gt;global-fishing-watch&lt;/code&gt; project in your side bar. This project contains, two datasets: &lt;code&gt;&amp;quot;gfw_public_data&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;global_footprint_of_fisheries&amp;quot;&lt;/code&gt;. We will work on the latter, which contains the public data released with the &lt;em&gt;Science&lt;/em&gt; publication. This dataset contains the following four tables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fishing_effort&lt;/code&gt;: Daily Fishing Effort and Vessel Presence at 100th Degree Resolution by Flag State and Gear Type, 2012-2016&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fishing_effort_byvessel&lt;/code&gt;:Daily Fishing Effort at 10th Degree Resolution by MMSI, 2012-2016&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fishing_vessels&lt;/code&gt;: Characteristics of each vessel included in the effort data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vessels&lt;/code&gt;: This table includes all vessels that were matched to a registry, were identified through manual review or web searchers, or were classified by the neural network.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;establishing-a-connection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Establishing a connection&lt;/h1&gt;
&lt;p&gt;The first step to use the data from R, is to set a connection with BigQuery. This is done using the &lt;code&gt;DBI&lt;/code&gt; and &lt;code&gt;bigrquery&lt;/code&gt; packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(DBI)
library(bigrquery)

BQ_connection &amp;lt;-  dbConnect(bigquery(), 
                            project = &amp;#39;global-fishing-watch&amp;#39;,
                            dataset = &amp;quot;global_footprint_of_fisheries&amp;quot;, 
                            billing = &amp;quot;ng-gfw&amp;quot;, # your billing account name
                            use_legacy_sql = FALSE) # specify we are using Standard SQL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then need to authenticate the connection. This can be done when running your first query such as listing the tables in your connection through the function &lt;code&gt;dbListTable()&lt;/code&gt;. This will trigger a prompt in your R session asking if you want to cache your credentials. Allow access and return to RStudio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DBI::dbListTables(BQ_connection)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;fishing_effort&amp;quot;          &amp;quot;fishing_effort_byvessel&amp;quot;
## [3] &amp;quot;fishing_vessels&amp;quot;         &amp;quot;vessels&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are all set to start querying and analyzing Global Fishing Watch’s data. There are a couple of approaches to do this, and I will illustrate each one with the following use cases&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Summarize the number of fishing vessels by flag state in 2016&lt;/li&gt;
&lt;li&gt;Make a time series of fishing effort for China’s trawlers fleet&lt;/li&gt;
&lt;li&gt;Make a map of fishing effort for a particular region of the ocean&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;summarize-the-number-of-vessels-by-flag-state-and-gear-type&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Summarize the number of vessels by flag state and gear type&lt;/h1&gt;
&lt;p&gt;This is possibly one the first and simplest queries to do. For this use case, we will use the &lt;code&gt;dbplyr&lt;/code&gt; and &lt;code&gt;bigrquery&lt;/code&gt; packages that allow us to avoid the need to write SQL. We just write the &lt;code&gt;dplyr&lt;/code&gt; verbs and functions we all love, and the &lt;code&gt;dbplyr&lt;/code&gt; package translates them into SQL in the back-end. The main advantages of this approach is that it’s very friendly and readable, and prevents us from the cognitive dissonance of switching between programming languages. However, SQL is a very large language and &lt;code&gt;dbplyr&lt;/code&gt; does not do everything; it focuses on &lt;code&gt;SELECT&lt;/code&gt; statements which are often what we use the most.&lt;/p&gt;
&lt;p&gt;The first step here is to connect to the table we want to query using the &lt;code&gt;tbl()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) #loads dplyr and friends

fishing_vessels &amp;lt;- dplyr::tbl(BQ_connection, 
                              &amp;quot;fishing_vessels&amp;quot;) # connects to a table&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, notice that the variable created in your environment is not a dataframe or tibble but instead a list. This is because &lt;code&gt;tbl()&lt;/code&gt; creates a reference to the table in the remote database but does not bring the actual data into memory. When you print it out, you’ll see it looks like a tibble but the class is &lt;code&gt;tbl_sql&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fishing_vessels&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Source:   table&amp;lt;fishing_vessels&amp;gt; [?? x 11]
## # Database: BigQueryConnection
##         mmsi flag  geartype     length tonnage engine_power active_2012
##        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;      
##  1 603100157 AGO   trawlers       32.8    299.         734. FALSE      
##  2 603100137 AGO   trawlers       34.6    396.         865. FALSE      
##  3 603100161 AGO   trawlers       28.8    264.         652. FALSE      
##  4 603100174 AGO   trawlers       30.7    300.         704. FALSE      
##  5 603100164 AGO   trawlers       37.5    406.         851. FALSE      
##  6 603100139 AGO   trawlers       27.4    277.         749. FALSE      
##  7 603100175 AGO   trawlers       32.4    442.         889. FALSE      
##  8 603100159 AGO   trawlers       37.8    444.         887. FALSE      
##  9 603100160 AGO   trawlers       32.4    396.         812. FALSE      
## 10 603703900 AGO   purse_seines   36.8    292.        1182. TRUE       
## # ... with more rows, and 4 more variables: active_2013 &amp;lt;lgl&amp;gt;,
## #   active_2014 &amp;lt;lgl&amp;gt;, active_2015 &amp;lt;lgl&amp;gt;, active_2016 &amp;lt;lgl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(fishing_vessels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_dbi&amp;quot;  &amp;quot;tbl_sql&amp;quot;  &amp;quot;tbl_lazy&amp;quot; &amp;quot;tbl&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important difference between a local dataframe and a remote dataframe of class &lt;code&gt;tbl_sql&lt;/code&gt; is that in the latter your R code will run directly the database, not in memory. To do this efficiently, &lt;code&gt;dplyr&lt;/code&gt; will be as lazy as possible by 1) not pulling data into R unless explicitly asked to, and 2) delaying the actual communication to the database until the last possible moment (i.e., after it collects all that you want to do).&lt;/p&gt;
&lt;p&gt;Now, we can continue to use the dplyr verbs we are familiar with and summarize the table as we wish:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary_by_country_and_gear &amp;lt;- fishing_vessels %&amp;gt;% 
  filter(active_2016) %&amp;gt;% 
  group_by(flag, geartype) %&amp;gt;% 
  summarize(n_vessels = n_distinct(mmsi),
            total_GT = sum(tonnage)) %&amp;gt;% 
  arrange(desc(n_vessels))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, the object created in our environment is not the dataframe we expected. In fact, the above code never touched the database, it only recorded the instructions to query the data. To pull the data into a local &lt;code&gt;tibble&lt;/code&gt; we need to explicitly ask for it with the function &lt;code&gt;collect()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary_by_country_and_gear &amp;lt;- collect(summary_by_country_and_gear)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have an actual dataframe with which we can make a simple summarizing plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_20_flags &amp;lt;- summary_by_country_and_gear %&amp;gt;% 
  group_by(flag) %&amp;gt;% 
  summarize(n_vessels = sum(n_vessels)) %&amp;gt;% 
  top_n(20, n_vessels) %&amp;gt;% 
  pull(flag)

summary_by_country_and_gear %&amp;gt;% 
  filter(flag %in% top_20_flags) %&amp;gt;% 
  na.omit() %&amp;gt;% 
  ggplot(aes(x = forcats::fct_reorder(flag, n_vessels), y = n_vessels, fill = geartype))+
  geom_col()+
  coord_flip()+
  labs(x  = &amp;quot;&amp;quot;)+
  hrbrthemes::theme_ipsum()+
  ggsci::scale_fill_startrek()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-16-getting-global-fishing-watch-from-google-bigquery-using-r_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Chinese Trawlers are, by far, the largest fleet in the Global Fishing Watch Database.&lt;/p&gt;
&lt;p&gt;This approach is straight forward and works perfectly for simple queries. However, I recommend you become proficient with SQL to make the most of the power of BigQuery and Global Fishing Watch data. This will help you troubleshoot when things don’t work as expected and it will make it easier to reach out to the Global Fishing Watch community for help. A couple of great resources to learn are: &lt;a href=&#34;https://www.codecademy.com/learn/learn-sql&#34;&gt;Learn SQL | Codecademy&lt;/a&gt;, and &lt;a href=&#34;https://learncodethehardway.org/sql/&#34;&gt;Learn SQL the Hard Way&lt;/a&gt;. Another way to start learning SQL is to use the function &lt;code&gt;show_query()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt;, which will show you what your R code gets translated as in SQL, behind scenes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fishing_vessels %&amp;gt;% 
  filter(active_2016) %&amp;gt;% 
  group_by(flag, geartype) %&amp;gt;% 
  summarize(n_vessels = n_distinct(mmsi),
            total_GT = sum(tonnage)) %&amp;gt;% 
  arrange(desc(n_vessels)) %&amp;gt;% 
  show_query()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;SQL&amp;gt;
## SELECT `flag`, `geartype`, COUNT(DISTINCT `mmsi`) AS `n_vessels`, SUM(`tonnage`) AS `total_GT`
## FROM `fishing_vessels`
## WHERE (`active_2016`)
## GROUP BY `flag`, `geartype`
## ORDER BY `n_vessels` DESC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-time-series-of-fishing-effort-for-chinas-trawlers-fleet&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Make a time series of fishing effort for China’s trawlers fleet&lt;/h1&gt;
&lt;div id=&#34;the-dplyr-way&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The dplyr way&lt;/h3&gt;
&lt;p&gt;For this analysis we need to summarize fishing by date, only for Chinese trawlers between 2012-2016. So, we need to join the effort and vessels characteristics data and filter effort for Chinese trawlers only. An inner join is the perfect operation for this.&lt;/p&gt;
&lt;p&gt;Using the previous approach, we would write something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fishing_vessels &amp;lt;- dplyr::tbl(BQ_connection, &amp;quot;fishing_vessels&amp;quot;)
fishing_effort_byvessel &amp;lt;- dplyr::tbl(BQ_connection, &amp;quot;fishing_effort_byvessel&amp;quot;)

ts_china_effort &amp;lt;- fishing_effort_byvessel %&amp;gt;% 
  inner_join(fishing_vessels %&amp;gt;% 
               filter(flag == &amp;quot;CHN&amp;quot;, geartype == &amp;quot;trawlers&amp;quot;), by = &amp;quot;mmsi&amp;quot;) %&amp;gt;% 
  group_by(date) %&amp;gt;% 
  summarize(fishing_hours = sum(fishing_hours, na.rm = T)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  arrange(date) %&amp;gt;% 
  collect()

head(ts_china_effort)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   date       fishing_hours
##   &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;
## 1 2012-01-06         11.0 
## 2 2012-01-07         20.6 
## 3 2012-01-08         10.7 
## 4 2012-01-09          7.53
## 5 2012-01-10          4.36
## 6 2012-01-11         17.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Until recently, joining datasets through &lt;code&gt;bigrquery&lt;/code&gt; in this way was not possible. This has been implemented a couple weeks ago in the development version of the &lt;code&gt;bigrquery&lt;/code&gt; package, so make sure to install it for this to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-would-i-ever-write-sql&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why would I ever write SQL?&lt;/h3&gt;
&lt;p&gt;So, if I can simply write dplyr verbs to analyze data, why ever bother with SQL? Well, while the &lt;code&gt;bigrquery&lt;/code&gt; library is a fantastic tool for simple queries, I have found some important limitations that are a deal breaker for me. Here my reasons for writing SQL directly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The translation of functions across languages does not always work as expected. This results is a lot of head scratching and hacky workarounds that are not intuitive. For instance, try filtering the above time series for a particular year of interest.&lt;/li&gt;
&lt;li&gt;If you are new to SQL, Big Query’s online editor is a fantastic learning tool. 1) It verifies your queries and tells you if/where you have a mistake. 2) It has function, variable, and table auto completion. And 3) it has tooltip helpers that describe the functions you are trying to use.&lt;/li&gt;
&lt;li&gt;Big Query also tells you how much data you are going to query and therefore how much are you going to be billed for. This is important - especially if you are learning - because you do not want to mistakenly write an expensive query that burns all your Google Credits. I learned this the hard way. As a rule of thumb, querying 1TB of data is equal to $6.&lt;/li&gt;
&lt;li&gt;Lastly, writing and understanding SQL will help you troubleshoot and get help from the GFW community. Those guys do not work in R, so if you want their help, you need to speak their language :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK. So hopefully I have convinced you that learning SQL is worth it. Again, some great resources to learn are: &lt;a href=&#34;https://www.codecademy.com/learn/learn-sql&#34;&gt;Learn SQL | Codecademy&lt;/a&gt;, and &lt;a href=&#34;https://learncodethehardway.org/sql/&#34;&gt;Learn SQL the Hard Way&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-sql-way&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The SQL way&lt;/h3&gt;
&lt;p&gt;For the rest of this tutorial I’m going to assume that you have put in your hours and you are familiar with SQL. So, I will only focus on showing a couple workflows to write SQL and connect to Big Query without ever leaving R.&lt;/p&gt;
&lt;p&gt;One approach is writing your queries as strings, and later using the &lt;code&gt;bigrquery&lt;/code&gt; package to execute them using the same connection we have specified above. A great way to write your queries as strings is using the &lt;code&gt;glue_sql()&lt;/code&gt; function from the &lt;code&gt;glue&lt;/code&gt; library. This allows you to 1) use local R variables inside your SQL queries, and 2) divide long queries into sub-queries. This is illustrated below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Define your variables
min_year &amp;lt;- 2012
gear &amp;lt;- &amp;quot;trawlers&amp;quot;
flag &amp;lt;- &amp;quot;CHN&amp;quot;

# Query to get effort by mmsi and date after 2012
all_effort_by_mmsi_query &amp;lt;- glue::glue_sql(
  &amp;#39;
  Select
  date,
  mmsi,
  fishing_hours
  FROM
  `global-fishing-watch.global_footprint_of_fisheries.fishing_effort_byvessel`
  WHERE   
  EXTRACT(YEAR FROM PARSE_DATE(&amp;quot;%F&amp;quot;,date)) &amp;gt; {min_year}
  &amp;#39;,
  .con = BQ_connection
  )

# Query to extract only chinese trawlers
chinese_vessels_sub_query &amp;lt;- glue::glue_sql(
  &amp;quot;
  Select
  mmsi
  FROM
  `global-fishing-watch.global_footprint_of_fisheries.fishing_vessels`
  WHERE flag = {flag}
  AND geartype = {gear}
  &amp;quot;,
  .con = BQ_connection
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In each of these sub queries we are using locally defined variables by wrapping them with &lt;code&gt;{}&lt;/code&gt;. Next, we can combine these sub-queries into a larger final query by wrapping the sub-query variable names with &lt;code&gt;{}&lt;/code&gt; as we did above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;full_sql &amp;lt;- glue::glue_sql(
  &amp;quot;
  SELECT
  date,
  sum(fishing_hours) AS fishing_hours
  FROM ({all_effort_by_mmsi_query}) AS a
  LEFT JOIN  ({chinese_vessels_sub_query}) AS b
  ON a.mmsi = b.mmsi
  GROUP BY date
  ORDER BY date
  DESC
  &amp;quot;,
  .con = BQ_connection
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that if you print the variable &lt;code&gt;full_sql&lt;/code&gt; you can see the entire SQL query that has been built.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;full_sql&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;SQL&amp;gt; SELECT
## date,
## sum(fishing_hours) AS fishing_hours
## FROM (Select
## date,
## mmsi,
## fishing_hours
## FROM
## `global-fishing-watch.global_footprint_of_fisheries.fishing_effort_byvessel`
## WHERE   
## EXTRACT(YEAR FROM PARSE_DATE(&amp;quot;%F&amp;quot;,date)) &amp;gt; 2012) AS a
## LEFT JOIN  (Select
## mmsi
## FROM
## `global-fishing-watch.global_footprint_of_fisheries.fishing_vessels`
## WHERE flag = &amp;#39;CHN&amp;#39;
## AND geartype = &amp;#39;trawlers&amp;#39;) AS b
## ON a.mmsi = b.mmsi
## GROUP BY date
## ORDER BY date
## DESC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Up until this point we have not touched the actual data, we have only laid out the recipe for querying it. To actually run the query we then can use the function &lt;code&gt;dbGetQuery()&lt;/code&gt; from the &lt;code&gt;DBI&lt;/code&gt; library like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;china_trawlers_ts &amp;lt;- dbGetQuery(BQ_connection, 
                                full_sql)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;You do not have to use the &lt;code&gt;glue&lt;/code&gt; library to compose queries and execute them via this method. You can simply write the SQL queries as strings. I just wanted to show this handy function because writing long SQL queries in a single string often gets too crazy to manage without splitting things up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The resulting object from this query is a dataframe of daily total fishing effort by Chinese trawlers, from 2013 onwards, arranged by date. Now lets plot the data to observe the effect of the Chinese new year and the summer fishing moratorium on China’s temporal patterns of fishing effort.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;moratoria_dates &amp;lt;- tibble(year = c(2013:2016)) %&amp;gt;% 
  mutate(start_date = lubridate::ymd(paste(year,&amp;quot;-06-01&amp;quot;,sep = &amp;quot;&amp;quot;)),
         end_date = lubridate::ymd(paste(year,&amp;quot;-08-01&amp;quot;,sep = &amp;quot;&amp;quot;)))

new_year_dates &amp;lt;- tibble(year = c(2013:2016),
                         start_date = c(lubridate::ymd(&amp;quot;2013-02-07&amp;quot;),
                                        lubridate::ymd(&amp;quot;2014-01-28&amp;quot;),
                                        lubridate::ymd(&amp;quot;2015-02-16&amp;quot;),
                                        lubridate::ymd(&amp;quot;2016-02-05&amp;quot;)),
                         end_date = c(lubridate::ymd(&amp;quot;2013-02-13&amp;quot;),
                                      lubridate::ymd(&amp;quot;2014-02-3&amp;quot;),
                                      lubridate::ymd(&amp;quot;2015-02-22&amp;quot;),
                                      lubridate::ymd(&amp;quot;2016-02-11&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_rect(data = moratoria_dates, 
            aes(xmin = start_date, 
                xmax = end_date,
                ymin = 0,
                ymax = Inf,
                fill = &amp;quot;navyblue&amp;quot;),
            alpha = 0.5, 
            show.legend = TRUE) +
  geom_rect(data = new_year_dates, 
            aes(xmin = start_date, 
                xmax = end_date,
                ymin = 0,
                ymax = Inf,
                fill = &amp;quot;dodgerblue&amp;quot;),
            alpha = 0.5,
            show.legend = TRUE) +
  geom_line(data = china_trawlers_ts %&amp;gt;% 
               mutate(date = lubridate::ymd(date)) %&amp;gt;% 
               filter(lubridate::year(date) &amp;gt; 2012),
           aes(x = date, y = fishing_hours), 
           size = 0.3)+
  theme_minimal() +
  theme(axis.ticks = element_line(size = 0.5),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        axis.line = element_line(colour = &amp;quot;black&amp;quot;),
        axis.text.y = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        axis.title = element_text(size = 10),
        legend.text = element_text(size = 6),
        legend.justification = &amp;quot;center&amp;quot;,
        legend.position = &amp;quot;bottom&amp;quot;,
        plot.margin = margin(2,2,2,2)) + 
  scale_x_date(date_breaks = &amp;quot;1 year&amp;quot;, 
               date_labels = &amp;quot;%Y &amp;quot;) +
  xlab(&amp;quot;&amp;quot;) +
  scale_y_continuous(expand = c(0, 0),
                     labels = scales::comma) +
  ylab(&amp;quot;Fishing hours&amp;quot;)+
  scale_fill_manual(values = c(&amp;quot;orange&amp;quot;, &amp;quot;dodgerblue&amp;quot;),
                    name = &amp;quot; &amp;quot;,
                    labels = c(&amp;quot;Chinese New Year&amp;quot;, &amp;quot;Moratoria&amp;quot;)) +
  guides(colour = guide_legend(override.aes = list(alpha = .5)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-16-getting-global-fishing-watch-from-google-bigquery-using-r_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Important conclusion: Holidays can have as large an effect as strictly enforced policies on fishing activity. We need more holidays!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-map-of-fishing-effort-for-a-particular-region-of-the-ocean&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Make a map of fishing effort for a particular region of the ocean&lt;/h1&gt;
&lt;p&gt;A common use of Global Fishing Watch’s data is to make maps of fishing effort in an area of interest. I will show how you can do this and highlight another approach to query data from within R, using R Notebooks and chunks. For this, let’s make a map of fishing effort around the Azores Archipelago, Portugal.&lt;/p&gt;
&lt;p&gt;If you are not familiar with R Notebooks, they are a type of code script that allows you to mix prose and code in a single document, with chunks of code that can be run independently and interactively. This is called literate programming, and makes analysis easier to reproduce. In fact, this tutorial is an R Notebook!. For more details on R Notebooks take a look at &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/notebook.html&#34;&gt;R Markdown: The Definitive Guide&lt;/a&gt; by Yihui Xie. One important advantage of R Notebooks is that chunks of code can use pretty much any programming language. This means that you could mix python, SQL, and R in a single, easy to read document! For our example we will use a SQL chunk to directly write an SQL query and get the data of fishing effort around the Azores.&lt;/p&gt;
&lt;p&gt;First, lets get a map of the Azores to obtain the bounding of of our region of interest. To do this we can use the &lt;code&gt;mregions&lt;/code&gt; package and a couple handy functions from the &lt;code&gt;sf&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get the shapefile from mregions

azores_eez &amp;lt;- mregions::mr_shp(key = &amp;quot;MarineRegions:eez&amp;quot;,
                 filter = &amp;quot;Portuguese Exclusive Economic Zone (Azores)&amp;quot;,
                 maxFeatures = 200)

# transform the shapefile into an sf object
azores_eez &amp;lt;- azores_eez %&amp;gt;% 
  sf::st_as_sf()

# get the bounding box of the shapefile
azores_bbox &amp;lt;- sf::st_bbox(azores_eez)

# extend the bounding box 1 degree in every direction.
min_lon &amp;lt;- azores_bbox[[&amp;quot;xmin&amp;quot;]] - 1 
max_lon &amp;lt;- azores_bbox[[&amp;quot;xmax&amp;quot;]] + 1
min_lat &amp;lt;- azores_bbox[[&amp;quot;ymin&amp;quot;]] - 1
max_lat &amp;lt;- azores_bbox[[&amp;quot;ymax&amp;quot;]] + 1 

# define mapping resoluion in degrees
resolution &amp;lt;- 0.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we query the data. To do this with a sql chunk, we need to simply specify the language we are using (sql), the database connection (same as before), and the name we want to give to the variable that will contain the results of the query.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```{sql connection = BQ_connection, output.var = &amp;quot;binned_effort_around_Azores&amp;quot;, echo = FALSE}
SELECT
  FLOOR(lat_bin/?resolution)*?resolution + 0.5*?resolution lat_bin_center,
  FLOOR(lon_bin/?resolution)*?resolution + 0.5*?resolution lon_bin_center,
  SUM(fishing_hours) fishing_hours
FROM (
  SELECT
    lat_bin/100 lat_bin,
    lon_bin/100 lon_bin,
    fishing_hours
  FROM
    `global-fishing-watch.global_footprint_of_fisheries.fishing_effort`
  WHERE
    _PARTITIONTIME &amp;gt;= &amp;#39;2016-01-01 00:00:00&amp;#39;
    AND _PARTITIONTIME &amp;lt; &amp;#39;2016-12-31 00:00:00&amp;#39;)
  WHERE 
  lat_bin &amp;gt;= ?min_lat
  AND lat_bin &amp;lt;= ?max_lat
  AND lon_bin &amp;gt;= ?min_lon
  AND lon_bin &amp;lt;= ?max_lon
GROUP BY
  lat_bin_center,
  lon_bin_center
HAVING 
  fishing_hours &amp;gt; 0
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, so what just happened here? First, we filtered the data for the year 2016 and converted the coordinates from 100th of a degree to degrees (See table schema in BigQuery). Then we filtered the coordinates so that they are inside our bounding box. To do this we add &lt;code&gt;?&lt;/code&gt; before the name of our locally defined variable and its value gets automagically added to the query. Lastly, we group and summarize the effort data with a resolution of 0.1º degrees and exclude anything with no fishing effort.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;binned_effort_around_Azores %&amp;gt;% 
  filter(fishing_hours &amp;gt; 1) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  ggplot()+
  geom_raster(aes(x = lon_bin_center, y = lat_bin_center, fill = fishing_hours))+
  viridis::scale_fill_viridis(name = &amp;quot;Fishing hours&amp;quot; ,
                              trans = &amp;quot;log&amp;quot;,
                              breaks = scales::log_breaks(n = 10, base = 4))+
  geom_sf(data = azores_eez,
            fill = NA,
            col = &amp;quot;black&amp;quot;,
            size = 1.4
            ) +
   hrbrthemes::theme_ipsum()+
  labs(title = &amp;quot;Fishing effort inside and around Azores&amp;quot;,
       subtitle = &amp;quot;2017&amp;quot;,
       y = &amp;quot;&amp;quot;,
       x = &amp;quot;&amp;quot;)+
    theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        plot.title = element_text(size = 14, hjust = 0),
        plot.subtitle = element_text(size = 14, hjust = 0),
        plot.margin = margin(10,0,0,0))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-16-getting-global-fishing-watch-from-google-bigquery-using-r_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;closing-remarks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Closing remarks&lt;/h1&gt;
&lt;p&gt;Global Fishing Watch’s commitment to transparency and open source data, is rapidly changing the way we do research in fisheries science, and marine conservation. Powerful tools like Big Query and useful R packages (e.g., &lt;code&gt;DBI&lt;/code&gt;, &lt;code&gt;bigrquery&lt;/code&gt;, &lt;code&gt;rmarkdown&lt;/code&gt;) are making these data accessible and easy to analyze, which will hopefully increase the rate it’s being used and the impact it can have. Have fun!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping the Global Network of Transnational Fisheries</title>
      <link>/post/mapping-the-global-network-of-transnational-fisheries/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/mapping-the-global-network-of-transnational-fisheries/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-dataset&#34;&gt;The dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-the-dataset-spatial&#34;&gt;Making the dataset spatial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-great-circles-work&#34;&gt;Making Great Circles Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualizing-directionality&#34;&gt;Visualizing directionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-plotting&#34;&gt;Final plotting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Global Fishing Watch has opened the doors to a new era of transparency and accountability in industrial fisheries. Our recent paper in Science: &lt;a href=&#34;http://science.sciencemag.org/content/359/6378/904&#34;&gt;“Tracking the global footprint of fisheries”&lt;/a&gt; introduced this database to the scientific community and highlighted some of the potential research and management applications. One of these is to examine the global network of transnational fisheries (i.e., countries that fish in Exclusive Economic Zone’s (EEZ) of other countries) and ask: who fishes where? which countries fish the most in foreign waters? which EEZ’s are most heavily fished by foreign nations? what spatial patterns emerge from visualizing the inter-connectedness of transnational fisheries?&lt;/p&gt;
&lt;p&gt;In this blog post, I’ll walk through how we used Global Fishing Watch data to make an &lt;a href=&#34;https://sfg-ucsb.shinyapps.io/network-transboundary-fisheries/&#34;&gt;interactive visualization&lt;/a&gt; of this network which is introduced in our recent publication: &lt;a href=&#34;http://dx.doi.org/10.1038/s41559-018-0499-1&#34;&gt;“Rapid and lasting gains from solving illegal fishing”&lt;/a&gt; published in the journal Nature Ecology &amp;amp; Evolution.&lt;/p&gt;
&lt;p&gt;All the analysis is done in R, with Studio, using the following packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(maps)
library(tidyverse)
library(rnaturalearth)
library(sf)
library(scales)
library(zeallot)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;the-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The dataset&lt;/h2&gt;
&lt;p&gt;Global Fishing Watch data has been made available for free &lt;a href=&#34;https://globalfishingwatch.force.com/gfw/s/data_download&#34;&gt;here&lt;/a&gt;. This includes daily data of fishing effort by vessel at 0.1º resolution, and data of vessel characteristics including flag state, gear type, length, and others.&lt;/p&gt;
&lt;p&gt;The first step is to summarize fishing effort by flag state and Exclusive Economic Zone. For that, we can use the EEZ shapefile provided by &lt;a href=&#34;http://marineregions.org/&#34;&gt;Marine Regions&lt;/a&gt; and spatially join it with the summarized 0.1º resolution fishing effort data. In this blog post I will skip this step - it will be a separate post soon - and instead focus on making the visualization.&lt;/p&gt;
&lt;p&gt;Here is snippet of the dataset:&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
flag
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eez
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_vessels
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_days
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_hours
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_kWh
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lat
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Italy
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28767
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.66
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Libya
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32158
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.14
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Malta
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
103
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88729
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.31
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Montenegro
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1083
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
313512
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.87
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Algeria
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Italy
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
116
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42833
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.66
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flag&lt;/code&gt;: Flag state of the fishing fleet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eez&lt;/code&gt;: Exclusive Economic Zone of the country of territory being fished.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fishing_vessels&lt;/code&gt;: Total number of fishing vessels active inside the eez.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fishing_days&lt;/code&gt;: Total number of fishing days inside the eez.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fishing_hours&lt;/code&gt;: Total number of fishing hours inside the eez.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fishing_kWh&lt;/code&gt;: Total number of energy spent fishing inside the eez.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_lat&lt;/code&gt;, &lt;code&gt;end_lat&lt;/code&gt;: Spatial coordinates of the centroid of the EEZ of the fishing flag state, with some exceptions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_lon&lt;/code&gt;, &lt;code&gt;end_lon&lt;/code&gt;: Spatial coordinates of the centroid of the EEZ, with some exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have excluded here 1) the connections between EU members states 2) the EU Northern agreements with Norway, and Iceland, 3) connections between sovereign states, e,g: France and Reunion and 4) disputed or jointly managed marine territories.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; The coordinates here do not refer to the actual port, or coastline from where vessels are fishing from or fishing in. These are merely for national-level visualization purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;making-the-dataset-spatial&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making the dataset spatial&lt;/h2&gt;
&lt;p&gt;After importing the data, we need to convert it to a &lt;strong&gt;simple features dataframe&lt;/strong&gt;, where each row corresponds to a line that connects the start and end points or - in our case - the flag state and the EEZ. For that we will use handy functions from the &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;purrr&lt;/code&gt; packages. If you are new to both these packages, two great tutorials are this &lt;a href=&#34;https://jennybc.github.io/purrr-tutorial/&#34;&gt;purrr tutorial&lt;/a&gt; by Jenny Brian and &lt;a href=&#34;https://edzer.github.io/UseR2017/&#34;&gt;Spatial Data in R: New Directions&lt;/a&gt; by Edzer Pebesma. Parts of this blog post are borrowed from the post &lt;a href=&#34;http://www.visibledata.co.uk/blog/2018/02/28/2018-02-28_great-circles-with-sf-and-leaflet/&#34;&gt;Great circles with sf and leaflet&lt;/a&gt; by Martin John Hadley.&lt;/p&gt;
&lt;p&gt;First, lets create a &lt;code&gt;LINESTRING&lt;/code&gt; simple feature for each row of our dataframe and create a simple features dataframe of our data. &lt;code&gt;LINESTRING&lt;/code&gt;s are one-dimensional geometries the contain a “sequence of points connected by straight, non-self intersecting line pieces”. We can create them by making matrices of our start and end coordinates and then mapping the &lt;code&gt;st_linestring()&lt;/code&gt; function across them. We also need to set the coordinate reference system to WGS84 as we are using lat/long coordinates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;network_data_sf &amp;lt;- network_data %&amp;gt;%
  select(start_lon, start_lat, end_lon, end_lat) %&amp;gt;% 
  purrr::transpose() %&amp;gt;% 
  purrr::map(~ matrix(flatten_dbl(.), nrow = 2, byrow = TRUE)) %&amp;gt;% 
  purrr::map(st_linestring) %&amp;gt;%
  st_sfc(crs = 4326) %&amp;gt;%
  st_sf(geometry = .)%&amp;gt;%
  bind_cols(network_data) %&amp;gt;%
  select(everything(), geometry)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
flag
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eez
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_vessels
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_days
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_hours
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_kWh
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
geometry
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
c(19.11, 15.65, 40.93, 43.43)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Italy
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28767
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.66
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
c(19.11, 12.93, 40.93, 39.66)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Libya
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32158
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.14
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
c(19.11, 18.5, 40.93, 33.14)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We now have a special class of dataframe (a &lt;a href=&#34;http://tibble.tidyverse.org/&#34;&gt;tibble&lt;/a&gt; to be precise) with a list-column that contains the geometry features we just created (i.e.,one &lt;code&gt;LINESTRING&lt;/code&gt; per row). Lets use the function &lt;code&gt;geom_sf()&lt;/code&gt; from the &lt;code&gt;ggplot2&lt;/code&gt; package to take a look at one line connecting Vanuatu to Chile:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world_map &amp;lt;- rnaturalearth::ne_countries(scale = &amp;#39;small&amp;#39;, returnclass = c(&amp;quot;sf&amp;quot;))

network_data_sf %&amp;gt;% 
  filter(eez == &amp;quot;Chile&amp;quot;, flag == &amp;quot;Vanuatu&amp;quot;) %&amp;gt;% 
  ggplot() +
  borders()+
  geom_sf(col = &amp;quot;blue&amp;quot;)+
  borders()+
  theme_minimal()+
  coord_sf(datum = NA)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-15-mapping-the-global-network-of-transnational-fisheries_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;making-great-circles-work&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making Great Circles Work&lt;/h2&gt;
&lt;p&gt;The next step is to divide our &lt;code&gt;LINESTRING&lt;/code&gt; - which currently has only two points - into multiple smaller segments along the corresponding great circle path. These great circles are what you often seen on airline magazines and represent the shortest path between two points on the surface of a sphere. The &lt;code&gt;sf&lt;/code&gt; package has a handy function called &lt;code&gt;st_segmentize()&lt;/code&gt; that does this and we can specify the length of each segment.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;network_data_sf &amp;lt;- network_data_sf %&amp;gt;% 
  st_segmentize(units::set_units(100, km)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-15-mapping-the-global-network-of-transnational-fisheries_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Oh no! While &lt;code&gt;st_segmentize()&lt;/code&gt; worked and produced the correct path of the great circle, the function does not care about the dateline. In the future, this will be addressed in the &lt;code&gt;sf&lt;/code&gt; package, but in the meantime we can manually re-scale our longitudes to [-180,180], which gives us:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;network_data_sf &amp;lt;- network_data_sf %&amp;gt;% 
  mutate(geometry = (geometry + c(180,90)) %% c(360) - c(180,90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-15-mapping-the-global-network-of-transnational-fisheries_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So close!! Our line does not know that it needs to break at the dateline. So, for this we wrap our &lt;code&gt;LINESTRING&lt;/code&gt; around the dateline using the aptly named &lt;code&gt;st_wrap_dateline()&lt;/code&gt; function. A side effect of the &lt;code&gt;st_wrap_dateline()&lt;/code&gt; is that our geometry type is no longer &lt;code&gt;LINESTRING&lt;/code&gt; but &lt;code&gt;GEOMETRY&lt;/code&gt;. This is because each simple feature that crosses the dateline is split into two becoming a &lt;code&gt;MULTILINESTRING&lt;/code&gt;. When we combine more than one type of single simple feature in a collection (e.g, &lt;code&gt;MULTILINESTRING&lt;/code&gt; and &lt;code&gt;LINESTRING&lt;/code&gt;), the overall geometry type becomes &lt;code&gt;GEOMETRY&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;network_data_sf &amp;lt;- network_data_sf %&amp;gt;% 
  st_wrap_dateline(options = c(&amp;quot;WRAPDATELINE=YES&amp;quot;,  &amp;quot;DATELINEOFFSET=180&amp;quot;), quiet = TRUE) %&amp;gt;% 
  sf::st_sf(crs = 4326)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-15-mapping-the-global-network-of-transnational-fisheries_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1344&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-directionality&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizing directionality&lt;/h2&gt;
&lt;p&gt;We now have our paths right, however, we still need to visualize the directionality. Where does a path start and end?. A common idea is to add arrows to the lines, but, since we will be plotting many many lines on the same graph this will not be optimal. My solution to this is to use a blue-red color gradient to represent the cumulative distance traveled from the starting point. This way we will have the starting points - representing sources of fishing effort - represented in blue, and end point - sinks of foreign fishing effort - represented in red. This will allow us to visualize patterns and hotspots more readily.&lt;/p&gt;
&lt;p&gt;So, how do we do this? First, we need to unpack the &lt;code&gt;LINESTRING&lt;/code&gt;s into their coordinates, while keeping track of the line ID’s. Second, we calculate the distance traveled between the starting point and each position along the paths and 3) we use the color gradient to represent the distance traveled. Ready, set, go.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;st_coordinates()&lt;/code&gt; function to unpack the coordinates of each feature but first we need to change the type of our simple feature dataframe from &lt;code&gt;GEOMETRY&lt;/code&gt; to &lt;code&gt;MULTILINESTRING&lt;/code&gt; using the &lt;code&gt;st_cast()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;st_coordinates(st_cast(network_data_sf,&amp;quot;MULTILINESTRING&amp;quot;)$geometry) %&amp;gt;% 
  as_data_frame() &lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
X
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Y
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
L1
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
L2
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.41
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The resulting dataframe contains all the coordinates of each line and the corresponding line IDs. L2 is the main path (e.g., Vanuatu to Chile), and L1 is the ID of the resulting sublines when a line crosses the dateline. We can then nest our dataframe by line id and assign this to our data frame using the clever &lt;code&gt;%&amp;lt;-%&lt;/code&gt; operator from the &lt;code&gt;zeallot&lt;/code&gt; &lt;a href=&#34;https://www.rstudio.com/resources/videos/an-assignment-operator-to-unpack-vectors-and-lists/&#34;&gt;package.&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(network_data_sf$line_id, network_data_sf$coords) %&amp;lt;-% (
  st_coordinates(st_cast(network_data_sf,&amp;quot;MULTILINESTRING&amp;quot;)$geometry) %&amp;gt;% 
  as_data_frame() %&amp;gt;% 
  rename(subline_id = L1) %&amp;gt;%   
  nest(-L2)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; &#34;&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
flag
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eez
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_vessels
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_days
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_hours
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_kWh
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
line_id
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
coords
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
geometry
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
list(X = c(19.11, 18.2703942103055, 17.4142148534604, 16.5409297455863, 15.65), Y = c(40.93, 41.5646106334205, 42.1929929541022, 42.8148815460332, 43.43), subline_id = c(1, 1, 1, 1, 1))
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
c(19.11, 18.2703942103055, 17.4142148534604, 16.5409297455863, 15.65, 40.93, 41.5646106334205, 42.1929929541022, 42.8148815460332, 43.43)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Now, that we have our tibble with a list-column containing all coordinates for each path, we need to calculate the cumulative distances for each point and use a color gradient to represent them. To my knowledge, the easiest way to this requires us to leave the &lt;code&gt;sf&lt;/code&gt; package. To do this, we get rid of the geometry list-column of our tibble and unnest it. This produces a very long tibble where each row represent a point is great circle path between two locations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paths &amp;lt;- network_data_sf %&amp;gt;% 
  sf::st_set_geometry(NULL) %&amp;gt;% 
  unnest() %&amp;gt;% 
  mutate_at(vars(X,Y), round,2)&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; &#34;&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
flag
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eez
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_vessels
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_days
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_hours
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_kWh
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
line_id
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
X
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Y
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
subline_id
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.41
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;To calculate the distance traveled, we use the Haversine method, implemented in the function &lt;code&gt;distHaversine()&lt;/code&gt; from the &lt;code&gt;geosphere&lt;/code&gt; package. We wrap that function and then map it along our data using the &lt;code&gt;pmap()&lt;/code&gt; function. Finally we re-scale the distance from [0,1] for each path.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;estimate_distance_traveled &amp;lt;- function(start_lon, start_lat, current_lon, current_lat){
  
  start_coords &amp;lt;- c(start_lon, start_lat)
  current_coords &amp;lt;- c(current_lon, current_lat)
  
  geosphere::distHaversine(current_coords,start_coords)
  
}

paths &amp;lt;- paths %&amp;gt;% 
  mutate(distance = purrr::pmap_dbl(list(start_lon, start_lat, X, Y), estimate_distance_traveled)) %&amp;gt;% 
  group_by(line_id) %&amp;gt;% 
  mutate(normalized_distance = round(distance/max(distance),2)) %&amp;gt;% 
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; &#34;&gt;
&lt;table class=&#34;table table-striped table-hover table-condensed table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
flag
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eez
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_vessels
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_days
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_hours
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
fishing_kWh
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
start_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lon
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
end_lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
line_id
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
X
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Y
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
subline_id
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
distance
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
normalized_distance
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99305.12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.25
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Albania
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Croatia
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.41
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
199303.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.50
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-plotting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final plotting&lt;/h2&gt;
&lt;p&gt;We finally have our dataset ready, and using &lt;code&gt;ggplot&lt;/code&gt; and a nice basemap of the world from &lt;code&gt;rnaturalearth&lt;/code&gt; we can easily make our map of the Global Network of Transnational Fisheries!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(network_map &amp;lt;- ggplot() +
   geom_sf(data = world_map, size = .2, fill = &amp;quot;gray30&amp;quot;, col = &amp;quot;gray30&amp;quot;) +
   geom_point(data = network_data %&amp;gt;%
                 group_by(end_lon,end_lat) %&amp;gt;%
                 summarize(fishing_days = sum(fishing_days)),
               aes(end_lon, end_lat, size = fishing_days), col = &amp;quot;orange&amp;quot;, shape = 21, stroke = 1.5)+
   geom_path(data = paths,
             aes(X, Y, group = interaction(line_id,subline_id), 
                 col = normalized_distance , alpha = fishing_hours),  show.legend = NA) +
   scale_size_continuous(range = c(0.5,10), breaks = c(1000, 5000, 10000, 20000, 30000), labels = comma) +
   scale_alpha_continuous(range = c(0.3,1))+
   scale_color_gradient2(low = &amp;quot;#0571b0&amp;quot;, mid = &amp;quot;#0571b0&amp;quot;, midpoint = .5, high = &amp;quot;#b2182b&amp;quot;)+
   theme_minimal()+
   theme(legend.position = c(0.2,0), 
         legend.direction = &amp;quot;horizontal&amp;quot;,
         panel.grid.major = element_blank(),
         panel.grid.minor = element_blank(),
         panel.background = element_rect(fill = &amp;quot;white&amp;quot;,
                                 colour = &amp;quot;white&amp;quot;),
         axis.title = element_blank(),
         axis.text = element_blank(),
         axis.ticks = element_blank(),
         plot.margin = margin(0, 0, 0, 0, &amp;quot;cm&amp;quot;),
         plot.caption = element_text(colour = &amp;quot;gray&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 12, vjust = 9),
         plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = 14)) +
   guides(colour =  FALSE,
          alpha = F,
          size = guide_legend(title.position = &amp;quot;bottom&amp;quot;,title = &amp;quot;Fishing days&amp;quot;, title.hjust = 0.5))+
   scale_y_continuous(expand = c(.1,0)) + 
   scale_x_continuous(expand = c(.01,0.01))+
   labs(title = &amp;quot;Global Network of Transnational Fisheries&amp;quot;,
        caption = &amp;quot;Line color indicates the source (blue) and sink (red) of fishing effort. \n
        Line transparency is proportional to fishing effort.\n
        Circle size is proportional to the total foreign fishing effort in each EEZ. \n
        Data from Global Fishing Watch (2013-2016).&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-03-15-mapping-the-global-network-of-transnational-fisheries_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;200%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rapid and lasting gains from solving illegal fishing</title>
      <link>/publication/rapid_and_lasting_gains_from_solving_ilegal_fishing/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/rapid_and_lasting_gains_from_solving_ilegal_fishing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tracking the Global Footprint of Fisheries</title>
      <link>/publication/tracking_the_global_footprint_of_fisheries/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/tracking_the_global_footprint_of_fisheries/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0800</pubDate>
      
      <guid>/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://sourcethemes.com/academic/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Global Fishing Watch</title>
      <link>/project/global-fishing-watch/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/global-fishing-watch/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://globalfishingwatch.org/&#34; target=&#34;_blank&#34;&gt;Global Fishing Watch&lt;/a&gt; uses satellite technology, big data analytics, and machine learning, to illuminate the world&amp;rsquo;s fishing fleets with unprecedented resolution. By providing the public, governments, researchers, and management bodies with a near-real-time dataset of global fisheries, Global Fishing Watch is facilitating a revolution in fisheries management towards transparency, sustainability, and effective marine conservation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/gfw_effort.gif&#34; alt=&#34;GFW tracks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Global Fishing Watch&amp;rsquo;s dynamic database represents the largest influx of new data into the fields of fisheries science and marine conservation. It is expanding the possibilities and the kind of research and management questions we can answer. Some of these questions we are working on are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How does the global network of trans-boundary fisheries look like?&lt;/li&gt;
&lt;li&gt;Who fishes the high seas, where, and how profitable is it? What is the role of government subsidies to enable high seas fisheries?&lt;/li&gt;
&lt;li&gt;How well do we know where global catch is coming from?&lt;/li&gt;
&lt;li&gt;What can we learn from the behavior of fishing fleets about the status of the underlying fish stocks?&lt;/li&gt;
&lt;li&gt;How do fishing fleets respond to the creation of protected areas?&lt;/li&gt;
&lt;li&gt;What are the costs of creating large marine reserves in the high seas?
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Pristine Seas</title>
      <link>/project/pristine-seas/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/pristine-seas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.nationalgeographic.org/projects/pristine-seas/&#34; target=&#34;_blank&#34;&gt;Pristine Seas&lt;/a&gt; is a project created by National Geographic&amp;rsquo;s Explorer-in-residence Dr. Enric Sala, to explore, document, and help protect the last wild places of the Ocean. By combining science, storytelling, economics, and policy, Pristine Seas has successfully worked to protect 16 unique marine ecosystems all around the world, covering a total area of 5.1 million square kilometers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/pristine-seas-map.jpg&#34; alt=&#34;Pristine Seas&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An important component of our work is to provide governments, not only with the ecological arguments to protect a special place, but also with the economic challenges and opportunities of creating a marine reserve. Usually, fisheries represent the most important challenge to overcome because reserves may directly displace their activities and affect the economic returns in the short-run. Therefore, having a good understanding of the distribution and intensity of fishing activities within a region of conservation priority is critical to assess the costs and trade-offs of designating a no-take marine reserve.&lt;/p&gt;

&lt;p&gt;Traditionally, however, information of fishing grounds, effort, and catches is rarely available and it is heavily guarded by the fishing industry; making the decision making process nontransparent. Now, Global Fishing Watch is allowing us to bring transparent data to the negotiating table and to objectively assess the potential impacts of a marine reserve on the fishing industry. This has been critical to advance the implementation of marine reserves in many of our recent expeditions, including: &lt;a href=&#34;https://www.nationalgeographic.org/expeditions/clipperton-atoll/&#34; target=&#34;_blank&#34;&gt;Clipperton Atoll Marine Protected Area&lt;/a&gt; (France), &lt;a href=&#34;https://www.nationalgeographic.org/expeditions/niue/&#34; target=&#34;_blank&#34;&gt;Niue Marine Protected Area&lt;/a&gt;, Revillagigedo National Park (Mexico), &lt;a href=&#34;https://www.nationalgeographic.org/expeditions/juan-fernandez-archipelago/&#34; target=&#34;_blank&#34;&gt;Juan Fernández Marine Park&lt;/a&gt;(Chile), and &lt;a href=&#34;https://www.nationalgeographic.org/expeditions/cape-horn/&#34; target=&#34;_blank&#34;&gt;Cape Horn - Diego Ramirez Marine Park&lt;/a&gt;  (Chile).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
